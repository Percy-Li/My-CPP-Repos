#include <iostream>
using namespace std;

typedef struct DNode
{
	char data;
	struct DNode* prior;
	struct DNode* next;
}DLinkNode;
void CreateListR(DLinkNode*& L, char a[], int n)	//尾插法建立双链表
{
	DLinkNode* s, * r;
	L = (DLinkNode*)malloc(sizeof(DLinkNode));	//创建头结点
	r = L;
	for (int i = 0; i < n; i++) //循环建立数据结点
	{
		s = (DLinkNode*)malloc(sizeof(DLinkNode));
		s->data = a[i];
		r->next = s;
		s->prior = r;
		r = s;
	}
	r->next = L;
	L->prior = r;
}
void InitList(DLinkNode*& L)	//初始化线性表
{
	L = (DLinkNode*)malloc(sizeof(DLinkNode));
	L->prior = L->next = NULL;
}
void DestroyList(DLinkNode*& L)		//销毁线性表
{
	DLinkNode* pre = L, * p = pre->next;
	while (p != NULL)
	{
		free(L);
		pre = p;
		p = pre->next;
	}
	free(pre);
}
bool ListEmpty(DLinkNode* L)	//判断线性表是否为空
{
	return(L->next == NULL);
}
int ListLength(DLinkNode* L)	//求线性表的长度
{
	DLinkNode* p = L;
	int i = 0;
	while (p->next != NULL)
	{
		i++;
		p = p->next;
	}
	return i;
}
void DispList(DLinkNode* L)		//输出线性表
{
	DLinkNode* p = L->next;
	while (p != NULL)
	{
		printf("%d", p->data);
		p = p->next;
	}
	printf("\n");
}
bool GetElem(DLinkNode* L, int i, char& e)	//求线性表第i个元素值
{
	int j = 1;
	DLinkNode* p = L->next;
	if (i <= 0 || L->next == L)
		return false;
	while (j < i && p != NULL)
	{
		j++;
		p = p->next;
	}
	if (p == NULL)
		return false;
	else
	{
		e = p->data;
		return true;
	}
}
int LocateElem(DLinkNode* L, char e)	//查找第一个值域为e的元素序号
{
	int i = 1;
	DLinkNode* p = L->next;
	while (p != NULL && p->data != e)
	{
		i++;
		p = p->next;
	}
	if (p == NULL)
		return false;
	else
		return i;
}
bool ListInsert(DLinkNode*& L, int i, char e)	//插入第i个元素
{
	int j = 0;
	DLinkNode* p = L, * s;
	if (i < 0)
		return false;
	while (j < i - 1 && p != NULL)
	{
		j++;
		p = p->next;
	}
	if (p == NULL)
		return false;
	else
	{
		s = (DLinkNode*)malloc(sizeof(DLinkNode));
		s->data = e;
		s->next = p->next;
		if (p->next != NULL)
			p->next->prior = s;
		s->prior = p;
		p->next = s;
		return true;
	}
}
bool ListDelete(DLinkNode*& L, int i, char& e)	//删除第i个元素
{
	int j = 0;
	DLinkNode* p = L, * q;
	if (i <= 0)
		return false;
	while (j < i - 1 && p != NULL)
	{
		j++;
		p = p->next;
	}
	if (p == NULL)
		return false;
	else {
		q = p->next;
		if (q == NULL)
			return false;
		e = q->data;
		p->next = q->next;
		if (p->next != NULL)
			p->next->prior = p;
		free(q);
		return true;
	}
}
int main()
{
	DLinkNode* h;
	char e;
	int a;
	InitList(h);	//(1)
	ListInsert(h, 1, 'a');
	ListInsert(h, 2, 'b');
	ListInsert(h, 3, 'c');
	ListInsert(h, 4, 'd');
	ListInsert(h, 5, 'e');	//(2)
	DispList(h);	//(3)
	cout << ListLength(h) << endl;	//(4)
	cout << ListEmpty(h) << endl;	//(5)
	GetElem(h, 3, e);	//(6)
	cout << LocateElem(h, 'a') << endl;		//(7)
	ListInsert(h, 4, 'f');	//(8)
	DispList(h);	//(9)
	ListDelete(h, 3, e);	//(10)
	DispList(h);	//(11)
	DestroyList(h);		//(12)
	cin >> a;
	return 0;
}



